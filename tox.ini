[tox]
requires =
    tox>=4.18.1
    tox-uv>=1.11.3
env_list =
    fix
    3.13
    3.12
    3.11
    3.10
    3.9
    3.8
    type
    docs
    readme
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {env_name}
package = wheel
wheel_build_env = .pkg
extras =
    testing
pass_env =
    PYTEST_*
set_env =
    COVERAGE_FILE = {env:COVERAGE_FILE:{work_dir}{/}.coverage.{env_name}}
commands =
    pytest {tty:--color=yes} {posargs: --no-cov-on-fail --cov-context=test \
      --cov={env_site_packages_dir}{/}pyproject_api --cov={tox_root}{/}tests --cov-config={tox_root}{/}pyproject.toml \
      --cov-report=term-missing:skip-covered --cov-report=html:{env_tmp_dir}{/}htmlcov \
      --cov-report=xml:{work_dir}{/}coverage.{env_name}.xml --junitxml={work_dir}{/}junit.{env_name}.xml \
      tests}
labels = test

[testenv:fix]
description = run formatter and linters
skip_install = true
deps =
    pre-commit-uv>=4.1.1
commands =
    pre-commit run --all-files --show-diff-on-failure {tty:--color=always} {posargs}

[testenv:type]
description = run type check on code base
deps =
    mypy==1.11.2
set_env =
    {tty:MYPY_FORCE_COLOR = 1}
commands =
    mypy src/pyproject_api --strict
    mypy tests --strict

[testenv:docs]
description = build documentation
extras =
    docs
commands =
    sphinx-build -d "{env_tmp_dir}{/}doc_tree" docs "{work_dir}{/}docs_out" --color -b html {posargs} -W
    python -c 'print(r"documentation available under file://{work_dir}{/}docs_out{/}index.html")'

[testenv:readme]
description = check that the long description is valid
skip_install = true
deps =
    check-wheel-contents>=0.6
    twine>=5.1.1
    uv>=0.4.10
commands =
    uv build --sdist --wheel --out-dir {env_tmp_dir} .
    twine check {env_tmp_dir}{/}*
    check-wheel-contents --no-config {env_tmp_dir}

[testenv:dev]
description = dev environment with all deps at {envdir}
package = editable
extras =
    docs
    testing
commands =
    uv pip tree
    python -c "print(r'{env_python}')"
