[tox]
minversion = 3.22
envlist =
    fix
    py311
    py310
    py39
    py38
    py37
    type
    docs
    pkg_meta
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {envname}
package = wheel
wheel_build_env = .pkg
extras =
    testing
passenv =
    PYTEST_*
    SSL_CERT_FILE
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}{/}.coverage.{envname}}
commands =
    pytest {tty:--color=yes} {posargs: --no-cov-on-fail --cov-context=test \
      --cov={envsitepackagesdir}{/}pyproject_api --cov={toxinidir}{/}tests --cov-config={toxinidir}{/}pyproject.toml \
      --cov-report=term-missing:skip-covered --cov-report=html:{envtmpdir}{/}htmlcov \
      --cov-report=xml:{toxworkdir}{/}coverage.{envname}.xml --junitxml={toxworkdir}{/}junit.{envname}.xml \
      tests}
labels = test

[testenv:fix]
description = run formatter and linters
skip_install = true
deps =
    pre-commit>=3.2
passenv =
    {[testenv]passenv}
    PROGRAMDATA
commands =
    pre-commit run --all-files --show-diff-on-failure {tty:--color=always} {posargs}

[testenv:type]
description = run type check on code base
deps =
    mypy==1.1.1
setenv =
    {tty:MYPY_FORCE_COLOR = 1}
commands =
    mypy src/pyproject_api --strict
    mypy tests --strict

[testenv:docs]
description = build documentation
extras =
    docs
commands =
    sphinx-build -d "{envtmpdir}{/}doctree" docs "{toxworkdir}{/}docs_out" --color -b html {posargs} -W
    python -c 'print(r"documentation available under file://{toxworkdir}{/}docs_out{/}index.html")'

[testenv:pkg_meta]
description = check that the long description is valid
skip_install = true
deps =
    build[virtualenv]>=0.10
    check-wheel-contents>=0.4
    twine>=4.0.2
commands =
    python -m build -o {envtmpdir} -s -w .
    twine check --strict {envtmpdir}{/}*
    check-wheel-contents --no-config {envtmpdir}

[testenv:dev]
description = dev environment with all deps at {envdir}
usedevelop = true
extras =
    docs
    testing
commands =
    python -m pip list --format=columns
    python -c "print(r'{envpython}')"
